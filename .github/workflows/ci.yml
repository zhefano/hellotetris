name: iOS CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build iOS App
    runs-on: macos-14

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Show Swift version
        run: swift --version

      - name: List available simulators
        run: |
          xcrun simctl list devices available | head -20

      - name: Build project
        run: |
          xcodebuild clean build \
            -project hellotetris.xcodeproj \
            -scheme hellotetris \
            -destination 'platform=iOS Simulator,name=iPhone 16' \
            -derivedDataPath build \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          retention-days: 7

  test:
    name: Test iOS App
    runs-on: macos-14
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests
        run: |
          xcodebuild test \
            -project hellotetris.xcodeproj \
            -scheme hellotetris \
            -destination 'platform=iOS Simulator,name=iPhone 16' \
            -derivedDataPath build \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/
          retention-days: 7

  lint:
    name: SwiftLint
    runs-on: macos-14

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SwiftLint
        run: |
          brew install swiftlint

      - name: Run SwiftLint
        run: |
          swiftlint lint --reporter github-actions-logging

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security scan
        run: |
          echo "üîç Running security checks..."

          # Check for hardcoded secrets (improved patterns)
          echo "Checking for hardcoded secrets..."
          if grep -rE "(password|secret|token|key|api_key|apikey)\s*[:=]\s*['\"][^'\"]{8,}['\"]" . \
             --exclude-dir=.git --exclude-dir=build --exclude-dir=node_modules \
             --exclude="*.md" --exclude="*.storyboard" --exclude="*.plist" \
             --exclude="*.xcconfig" --exclude="*.json" --exclude="*.sks"; then
            echo "‚ö†Ô∏è  Potential hardcoded secrets found"
            exit 1
          fi

          # Check for debug code in production (allow fatalError in init methods)
          echo "Checking for debug code..."
          if grep -rE "^\s*(print|NSLog|debugPrint)\s*\(" . \
             --exclude-dir=.git --exclude-dir=build --exclude-dir=node_modules \
             --exclude="*Tests.swift" --exclude="*.md" --exclude="*.storyboard" \
             --exclude="*.plist" --include="*.swift"; then
            echo "‚ö†Ô∏è  Debug code found in production"
            exit 1
          fi

          # Check for TODO/FIXME in production code
          echo "Checking for TODO/FIXME items..."
          if grep -rE "(TODO|FIXME|XXX|HACK)" . \
             --exclude-dir=.git --exclude-dir=build --exclude="*.md" \
             --include="*.swift" | grep -v "// TODO:" | head -10; then
            echo "‚ÑπÔ∏è  Found TODO/FIXME items (informational only)"
          fi

          # Check for weak cryptographic practices
          echo "Checking for weak cryptographic practices..."
          if grep -rE "(MD5|SHA1|DES|RC4)" . \
             --exclude-dir=.git --exclude-dir=build --include="*.swift"; then
            echo "‚ö†Ô∏è  Weak cryptographic algorithms found"
            exit 1
          fi

          echo "‚úÖ Security scan completed"

  archive:
    name: Create Archive
    runs-on: macos-14
    if: github.ref == 'refs/heads/main'
    needs: [build, test, lint, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create archive
        run: |
          xcodebuild archive \
            -project hellotetris.xcodeproj \
            -scheme hellotetris \
            -destination 'generic/platform=iOS' \
            -archivePath build/hellotetris.xcarchive \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: app-archive
          path: build/hellotetris.xcarchive
          retention-days: 30
